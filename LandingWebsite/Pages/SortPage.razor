@page "/sorts"
@inject SelectSortingAlgorithm sorting;
@inject IJSRuntime JSRuntime;
@using Microsoft.JSInterop;

<title>Sorting Algorithms</title>

<div>
    <div class="taskbar_div">
        <div>
            <button @onclick="() => DropDownMenu()" class="base_button algorithm">Algorithms</button>
            <div id="dropDownButton" class="dropdown-content">
                @foreach (string s in AlgorithmList)
                {
                    <a @onclick="() => GetAlgorithm(s)">@s</a>
                }
            </div>
        </div>

        <button @onclick="() => Sort()" class="base_button visualize">Sort!</button>

        <div class="base_button clearGrid" onclick="GenerateSortingGrid()">Restart Grid</div>

        <div class="base_button home">
            <a class="base_button" href="https://github.com/dominik246/Blazor-Website">Github</a>
            <a class="base_button" href="/">Home</a>
        </div>

    </div>

    <div class="sorting_box" id="sorting_box">
    </div>
</div>

@code {
    public string Title { get; set; } = "Sorting Algorithms";

    private string AlgorithmName { get; set; } = "Selection Sort";

    private List<string> AlgorithmList { get; set; } = new List<string>()
{
        "Selection Sort",
        "Placeholder 0",
        "Placeholder 1",
        "Placeholder 2"
    };

    private void GetAlgorithm(string s)
    {
        AlgorithmName = s;
    }

    private async Task DropDownMenu()
    {
        await JSRuntime.InvokeVoidAsync("DropDownMenuFunc");
    }

    private async Task Sort()
    {
        JsonElement json = await JSRuntime.InvokeAsync<JsonElement>("GetElements");

        object[][] arr = await sorting.Select(json, AlgorithmName);

        await JSRuntime.InvokeVoidAsync("Sort", new object[] { arr });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("GenerateSortingGrid");
    }
}
