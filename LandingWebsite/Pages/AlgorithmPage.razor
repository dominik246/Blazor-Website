@page "/algorithms"

@inject ICreateGraphHelper _createGraph;
@inject IJSRuntime JSRuntime;

<title>@Title</title>

<div>
    <div class="taskbar_div">
        <div>
            <button onclick="DropDownMenuFunc()" class="base_button algorithm">Algorithms</button>
            <div id="myDropdown" class="dropdown-content">
                @foreach (string s in AlgorithmList)
                {
                    <a href="algorithms#@(s.ToSafeUrl())">@s</a>
                }
            </div>
        </div>

        <button @onclick="() => Visualize()" class="base_button visualize">Visualize!</button>

        <div class="base_button clearGrid" onclick="ClearGrid()">Clear Grid</div>

        <a class="base_button home" href="/">Home</a>

    </div>

    <div class="options_div">
        <div class="base_option start">
            <input type="checkbox" class="checkbox" id="startCheck" onclick="CheckBoxCheck(this)" name="checkbox"/> Start
        </div>
        <div class="base_option finish">
            <input type="checkbox" class="checkbox" id="finishCheck" onclick="CheckBoxCheck(this)" name="checkbox"/> Finish
        </div>
        <div class="base_option wall">
            <input type="checkbox" class="checkbox" id="wallCheck" onclick="CheckBoxCheck(this)" name="checkbox"/> Wall
        </div>        
        @*<div class="base_option checkpoint">
            <input type="checkbox" class="checkbox" id="checkpointCheck" onclick="CheckBoxCheck(this)" name="checkbox"/> Test4
        </div>*@    
    </div>

    <div class="grid_div">

        @for (int i = 0; i < 49; i++)
        {
            <div class="container_div">
                @for (int j = 0; j < 25; j++)
                {

                    <div class="grid_unit" id="@(Counter++)" onclick="UnitClicked()">
                    </div>
                }
            </div>
        }
    </div>
</div>


@code {
    public int Counter { get; set; }

    public string Title { get; set; } = "Shortest Path";

    public List<string> AlgorithmList { get; set; } = new List<string>()
{
        "Dijkstra's Algorithm",
        "A* Algorithm",
        "Something Something",
        "Algorithm Algorithm"
    };

    public List<List<IBasicNodeModel>> Graph { get; set; }
    private async Task RenderGrid()
    {
        Graph = await _createGraph.GetAsync(24, 48);
    }

    private async Task Visualize()
    {

    }
}
