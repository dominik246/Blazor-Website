@page "/algorithms"

@inject IJSRuntime JSRuntime;
@inject AlgorithmSelector Algorithm;
@inject IToastService Toast;
@using Blazored.Toast.Configuration
@using Microsoft.JSInterop;

<title>@Title</title>

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="10"
                ShowProgressBar="true" />

<div>
    <div class="taskbar_div">
        <div>
            <button @onclick="() => DropDownMenu()" class="base_button algorithm">Algorithms</button>
            <div id="dropDownButton" class="dropdown-content">
                @foreach (string s in AlgorithmList)
                {
                    <a @onclick="() => GetAlgorithm(s)">@s</a> 
                }
            </div>
        </div>

        <button @onclick="() => Visualize()" class="base_button visualize">Visualize!</button>

        <div class="base_button clearGrid" @onclick="() => ClearGrid()">Clear Grid</div>

        <a class="base_button home" href="/">Home</a>

    </div>

    <div class="options_div">
        <input type="button" class="base_button start" @onclick="() => OptionsButton(Options[0])" value="Start" />
        <input type="button" class="base_button finish" @onclick="() => OptionsButton(Options[1])" value="Finish" />
        <input type="button" class="base_button wall" @onclick="() => OptionsButton(Options[2])" value="Wall" />
        <input type="button" class="base_button remove" @onclick="() => OptionsButton(Options[3])" value="Remove" />
        <input type="button" class="base_button checkpoint" @onclick="() => OptionsButton(Options[4])" value="CheckPoint" />
    </div>

    <div class="grid_div">
        @for (int i = 0; i < 49; i++)
        {
            <div class="container_div">
                @for (int j = 0; j < 25; j++)
                {
                    string tempId = $"{j}, {i}";
                    <div class="grid_unit" id="@tempId" @onclick="() => UnitClicked(tempId)"></div> 
                    // !!! if it's a checkpoint, add a value indicating what's it's place in the list !!!
                }
            </div>
        }
    </div>
</div>

@code {
    private string Title { get; set; } = "Shortest Path";

    private string AlgorithmName { get; set; } = "Dijkstra's Algorithm";

    private List<string> AlgorithmList { get; set; } = new List<string>()
{
        "Dijkstra's Algorithm",
        "A* Algorithm",
        "Placeholder 1",
        "Placeholder 2"
    };

    private List<string> Options { get; set; } = new List<string>()
{
        "start",
        "finish",
        "wall",
        "remove",
        "checkpoint"
    };

    private async Task Visualize()
    {
        bool validGraph = await JSRuntime.InvokeAsync<bool>("CheckIfValidGraph");

        if (validGraph)
        {
            JsonElement grid = await JSRuntime.InvokeAsync<JsonElement>("GetGrid");

            int[][] result = await Algorithm.RunAsync(AlgorithmName, grid);
            await JSRuntime.InvokeVoidAsync("Visualize", new object[] { result });
        }
        else
            Toast.ShowError("Graph is not valid. Check if you have both a Start unit and a Finish Unit", "Error");
    }

    private void GetAlgorithm(string s)
    {
        AlgorithmName = s;
    }

    private async Task ClearGrid()
    {
        string toastText = await JSRuntime.InvokeAsync<string>("ClearGrid");
        Toast.ShowInfo(toastText);
    }

    private async Task OptionsButton(string option)
    {
        string[] toastText = await JSRuntime.InvokeAsync<string[]>("OptionsButton", option);

        Toast.ShowSuccess(toastText[0]);
    }

    private async Task UnitClicked(string id)
    {
        string[] response = await JSRuntime.InvokeAsync<string[]>("UnitClicked", id);

        if (!response.Any())
        {
            return;
        }


        switch (response[1])
        {
            case "error":
                Toast.ShowError(response[0]);
                break;
            case "success":
                Toast.ShowSuccess(response[0]);
                break;
            default:
                break;
        }
    }

    private async Task DropDownMenu()
    {
        await JSRuntime.InvokeVoidAsync("DropDownMenuFunc");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() => Toast.ShowSuccess("Press Start button when you're ready.", "Welcome!"));
        }
    }
}
